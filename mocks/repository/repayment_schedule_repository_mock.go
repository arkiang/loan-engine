// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repayment_schedule_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/repayment_schedule_repository.go -destination=mocks/repository/repayment_schedule_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "loan-engine/internal/model"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRepaymentScheduleRepository is a mock of RepaymentScheduleRepository interface.
type MockRepaymentScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepaymentScheduleRepositoryMockRecorder
	isgomock struct{}
}

// MockRepaymentScheduleRepositoryMockRecorder is the mock recorder for MockRepaymentScheduleRepository.
type MockRepaymentScheduleRepositoryMockRecorder struct {
	mock *MockRepaymentScheduleRepository
}

// NewMockRepaymentScheduleRepository creates a new mock instance.
func NewMockRepaymentScheduleRepository(ctrl *gomock.Controller) *MockRepaymentScheduleRepository {
	mock := &MockRepaymentScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockRepaymentScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepaymentScheduleRepository) EXPECT() *MockRepaymentScheduleRepositoryMockRecorder {
	return m.recorder
}

// BulkCreate mocks base method.
func (m *MockRepaymentScheduleRepository) BulkCreate(schedules []model.RepaymentSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkCreate", schedules)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkCreate indicates an expected call of BulkCreate.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) BulkCreate(schedules any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkCreate", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).BulkCreate), schedules)
}

// FindByLoanID mocks base method.
func (m *MockRepaymentScheduleRepository) FindByLoanID(loanID uint) ([]model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoanID", loanID)
	ret0, _ := ret[0].([]model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoanID indicates an expected call of FindByLoanID.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) FindByLoanID(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoanID", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).FindByLoanID), loanID)
}

// GetCustomerOutstandingAmount mocks base method.
func (m *MockRepaymentScheduleRepository) GetCustomerOutstandingAmount(customerID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerOutstandingAmount", customerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerOutstandingAmount indicates an expected call of GetCustomerOutstandingAmount.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) GetCustomerOutstandingAmount(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerOutstandingAmount", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).GetCustomerOutstandingAmount), customerID)
}

// GetOverdueUnpaidSchedules mocks base method.
func (m *MockRepaymentScheduleRepository) GetOverdueUnpaidSchedules(loanID uint) ([]model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueUnpaidSchedules", loanID)
	ret0, _ := ret[0].([]model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueUnpaidSchedules indicates an expected call of GetOverdueUnpaidSchedules.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) GetOverdueUnpaidSchedules(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueUnpaidSchedules", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).GetOverdueUnpaidSchedules), loanID)
}

// GetUnpaidSchedules mocks base method.
func (m *MockRepaymentScheduleRepository) GetUnpaidSchedules(loanID uint) ([]model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnpaidSchedules", loanID)
	ret0, _ := ret[0].([]model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnpaidSchedules indicates an expected call of GetUnpaidSchedules.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) GetUnpaidSchedules(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnpaidSchedules", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).GetUnpaidSchedules), loanID)
}

// IsCustomerDelinquent mocks base method.
func (m *MockRepaymentScheduleRepository) IsCustomerDelinquent(customerID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomerDelinquent", customerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomerDelinquent indicates an expected call of IsCustomerDelinquent.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) IsCustomerDelinquent(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomerDelinquent", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).IsCustomerDelinquent), customerID)
}

// MarkAsPaid mocks base method.
func (m *MockRepaymentScheduleRepository) MarkAsPaid(scheduleID uint, paidAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPaid", scheduleID, paidAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPaid indicates an expected call of MarkAsPaid.
func (mr *MockRepaymentScheduleRepositoryMockRecorder) MarkAsPaid(scheduleID, paidAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPaid", reflect.TypeOf((*MockRepaymentScheduleRepository)(nil).MarkAsPaid), scheduleID, paidAt)
}
