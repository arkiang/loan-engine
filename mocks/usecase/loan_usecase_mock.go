// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/loan_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/loan_usecase.go -destination=mocks/usecase/loan_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "loan-engine/internal/dto"
	model "loan-engine/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoanUsecase is a mock of LoanUsecase interface.
type MockLoanUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoanUsecaseMockRecorder
	isgomock struct{}
}

// MockLoanUsecaseMockRecorder is the mock recorder for MockLoanUsecase.
type MockLoanUsecaseMockRecorder struct {
	mock *MockLoanUsecase
}

// NewMockLoanUsecase creates a new mock instance.
func NewMockLoanUsecase(ctrl *gomock.Controller) *MockLoanUsecase {
	mock := &MockLoanUsecase{ctrl: ctrl}
	mock.recorder = &MockLoanUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanUsecase) EXPECT() *MockLoanUsecaseMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanUsecase) CreateLoan(loan *model.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanUsecaseMockRecorder) CreateLoan(loan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanUsecase)(nil).CreateLoan), loan)
}

// GetLoanByID mocks base method.
func (m *MockLoanUsecase) GetLoanByID(id uint) (*model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", id)
	ret0, _ := ret[0].(*model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanUsecaseMockRecorder) GetLoanByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanUsecase)(nil).GetLoanByID), id)
}

// GetOutstandingAmount mocks base method.
func (m *MockLoanUsecase) GetOutstandingAmount(loanID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutstandingAmount", loanID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutstandingAmount indicates an expected call of GetOutstandingAmount.
func (mr *MockLoanUsecaseMockRecorder) GetOutstandingAmount(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutstandingAmount", reflect.TypeOf((*MockLoanUsecase)(nil).GetOutstandingAmount), loanID)
}

// IsDelinquent mocks base method.
func (m *MockLoanUsecase) IsDelinquent(loanID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelinquent", loanID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelinquent indicates an expected call of IsDelinquent.
func (mr *MockLoanUsecaseMockRecorder) IsDelinquent(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelinquent", reflect.TypeOf((*MockLoanUsecase)(nil).IsDelinquent), loanID)
}

// ListLoansByCustomerID mocks base method.
func (m *MockLoanUsecase) ListLoansByCustomerID(customerID uint, filter dto.CommonFilter) ([]model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoansByCustomerID", customerID, filter)
	ret0, _ := ret[0].([]model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoansByCustomerID indicates an expected call of ListLoansByCustomerID.
func (mr *MockLoanUsecaseMockRecorder) ListLoansByCustomerID(customerID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoansByCustomerID", reflect.TypeOf((*MockLoanUsecase)(nil).ListLoansByCustomerID), customerID, filter)
}
