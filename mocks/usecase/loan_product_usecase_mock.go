// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/loan_product_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/loan_product_usecase.go -destination=mocks/usecase/loan_product_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "loan-engine/internal/dto"
	model "loan-engine/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoanProductUsecase is a mock of LoanProductUsecase interface.
type MockLoanProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoanProductUsecaseMockRecorder
	isgomock struct{}
}

// MockLoanProductUsecaseMockRecorder is the mock recorder for MockLoanProductUsecase.
type MockLoanProductUsecaseMockRecorder struct {
	mock *MockLoanProductUsecase
}

// NewMockLoanProductUsecase creates a new mock instance.
func NewMockLoanProductUsecase(ctrl *gomock.Controller) *MockLoanProductUsecase {
	mock := &MockLoanProductUsecase{ctrl: ctrl}
	mock.recorder = &MockLoanProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanProductUsecase) EXPECT() *MockLoanProductUsecaseMockRecorder {
	return m.recorder
}

// CreateLoanProduct mocks base method.
func (m *MockLoanProductUsecase) CreateLoanProduct(product *model.LoanProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoanProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoanProduct indicates an expected call of CreateLoanProduct.
func (mr *MockLoanProductUsecaseMockRecorder) CreateLoanProduct(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoanProduct", reflect.TypeOf((*MockLoanProductUsecase)(nil).CreateLoanProduct), product)
}

// GetLoanProductByID mocks base method.
func (m *MockLoanProductUsecase) GetLoanProductByID(id uint) (*model.LoanProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanProductByID", id)
	ret0, _ := ret[0].(*model.LoanProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanProductByID indicates an expected call of GetLoanProductByID.
func (mr *MockLoanProductUsecaseMockRecorder) GetLoanProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanProductByID", reflect.TypeOf((*MockLoanProductUsecase)(nil).GetLoanProductByID), id)
}

// ListActiveLoanProducts mocks base method.
func (m *MockLoanProductUsecase) ListActiveLoanProducts(filter dto.CommonFilter) ([]model.LoanProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveLoanProducts", filter)
	ret0, _ := ret[0].([]model.LoanProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveLoanProducts indicates an expected call of ListActiveLoanProducts.
func (mr *MockLoanProductUsecaseMockRecorder) ListActiveLoanProducts(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveLoanProducts", reflect.TypeOf((*MockLoanProductUsecase)(nil).ListActiveLoanProducts), filter)
}
