// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/repayment_schedule_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/repayment_schedule_usecase.go -destination=mocks/usecase/repayment_schedule_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "loan-engine/internal/model"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRepaymentScheduleUsecase is a mock of RepaymentScheduleUsecase interface.
type MockRepaymentScheduleUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRepaymentScheduleUsecaseMockRecorder
	isgomock struct{}
}

// MockRepaymentScheduleUsecaseMockRecorder is the mock recorder for MockRepaymentScheduleUsecase.
type MockRepaymentScheduleUsecaseMockRecorder struct {
	mock *MockRepaymentScheduleUsecase
}

// NewMockRepaymentScheduleUsecase creates a new mock instance.
func NewMockRepaymentScheduleUsecase(ctrl *gomock.Controller) *MockRepaymentScheduleUsecase {
	mock := &MockRepaymentScheduleUsecase{ctrl: ctrl}
	mock.recorder = &MockRepaymentScheduleUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepaymentScheduleUsecase) EXPECT() *MockRepaymentScheduleUsecaseMockRecorder {
	return m.recorder
}

// GenerateSchedule mocks base method.
func (m *MockRepaymentScheduleUsecase) GenerateSchedule(loan *model.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSchedule", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateSchedule indicates an expected call of GenerateSchedule.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) GenerateSchedule(loan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSchedule", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).GenerateSchedule), loan)
}

// GetNextUnpaidSchedule mocks base method.
func (m *MockRepaymentScheduleUsecase) GetNextUnpaidSchedule(loanID uint) (*model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextUnpaidSchedule", loanID)
	ret0, _ := ret[0].(*model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextUnpaidSchedule indicates an expected call of GetNextUnpaidSchedule.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) GetNextUnpaidSchedule(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextUnpaidSchedule", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).GetNextUnpaidSchedule), loanID)
}

// GetOverdueUnpaidSchedule mocks base method.
func (m *MockRepaymentScheduleUsecase) GetOverdueUnpaidSchedule(loanID uint) ([]model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverdueUnpaidSchedule", loanID)
	ret0, _ := ret[0].([]model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverdueUnpaidSchedule indicates an expected call of GetOverdueUnpaidSchedule.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) GetOverdueUnpaidSchedule(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverdueUnpaidSchedule", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).GetOverdueUnpaidSchedule), loanID)
}

// GetSchedulesByLoanID mocks base method.
func (m *MockRepaymentScheduleUsecase) GetSchedulesByLoanID(loanID uint) ([]model.RepaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulesByLoanID", loanID)
	ret0, _ := ret[0].([]model.RepaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedulesByLoanID indicates an expected call of GetSchedulesByLoanID.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) GetSchedulesByLoanID(loanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulesByLoanID", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).GetSchedulesByLoanID), loanID)
}

// GetTotalOutstandingAmount mocks base method.
func (m *MockRepaymentScheduleUsecase) GetTotalOutstandingAmount(customerID uint) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalOutstandingAmount", customerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalOutstandingAmount indicates an expected call of GetTotalOutstandingAmount.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) GetTotalOutstandingAmount(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalOutstandingAmount", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).GetTotalOutstandingAmount), customerID)
}

// IsDelinquent mocks base method.
func (m *MockRepaymentScheduleUsecase) IsDelinquent(customerID uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelinquent", customerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDelinquent indicates an expected call of IsDelinquent.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) IsDelinquent(customerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelinquent", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).IsDelinquent), customerID)
}

// MarkAsPaid mocks base method.
func (m *MockRepaymentScheduleUsecase) MarkAsPaid(repaymentID uint, paidAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsPaid", repaymentID, paidAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsPaid indicates an expected call of MarkAsPaid.
func (mr *MockRepaymentScheduleUsecaseMockRecorder) MarkAsPaid(repaymentID, paidAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsPaid", reflect.TypeOf((*MockRepaymentScheduleUsecase)(nil).MarkAsPaid), repaymentID, paidAt)
}
